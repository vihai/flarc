  <%= javascript_include_tag :defaults %>
  <%= javascript_include_tag "../ext/adapter/prototype/ext-prototype-adapter.js" %>
  <%= javascript_include_tag Rails.env.development? ? "../ext/ext-all-debug.js" : "../ext/ext-all.js" %>
  <%= javascript_include_tag "ext_datetime.js" %>
  <%= javascript_include_tag "ext_searchfield.js" %>
  <%= javascript_include_tag "../ext/build/locale/ext-lang-en.js" %>

<div style="padding-left:20px">
<div style="height:20px">
<p style="color: green" id="flash-message"><%= flash[:notice] %></p>
<% javascript_tag do -%>
  setTimeout(function() { new Effect.Fade("flash-message",{}); }, 2000);
<% end -%>
</div>
<%= yield  %>
</div>

</body>
</html>
<script type="text/javascript" src="/ext/examples/grid/RowExpander.js"></script>



<div id="pilot-grid"></div>
<script type="text/javascript">
//<![CDATA[



Ext.onReady(function(){

 Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
 Ext.QuickTips.init();

function MsgTab(title, format){
 var msgCt;

 function createBox(t, s){
     return ['<div class="msg">',
             '<div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div>',
             '<div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3>', t, '</h3>', s, '</div></div></div>',
             '<div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div>',
             '</div>'].join('');
 }

 if(!msgCt){
     msgCt = Ext.DomHelper.insertFirst(document.body, {id:'msg-div'}, true);
 }
 msgCt.alignTo(document, 't-t');
 var s = String.format.apply(String, Array.prototype.slice.call(arguments, 1));
 var m = Ext.DomHelper.append(msgCt, {html:createBox(title, s)}, true);
 m.slideIn('t').pause(1).ghost("t", {remove:true});
}



 var NameField;

 RegistrationField = new Ext.form.TextField({
    id: 'RegistrationField',
    fieldLabel: 'Registration',
    maxLength: 6,
    allowBlank: false,
    anchor : '30%',
    maskRe: /([-A-Z0-9]+)$/
    });

 PilotCreateForm = new Ext.FormPanel(
  {
   labelAlign: 'top',
   bodyStyle:'padding:5px',
   width: 600,
   items: [{
       layout:'column',
       border:false,
       items:[{
           columnWidth:1,
           layout: 'form',
           border:false,
           items: [RegistrationField]
       }]
   }],
    buttons: [{
      text: 'Save and Close',
      handler: createThePilot
    },{
      text: 'Cancel',
      handler: function(){
        // because of the global vars, we can only instantiate one window... so let's just hide it.
        PilotCreateWindow.hide();
      }
    }]
 });

 PilotCreateWindow= new Ext.Window({
      id: 'PilotCreateWindow',
      title: 'Creating a New Pilot',
      closable:true,
      width: 610,
      height: 250,
      plain:true,
      layout: 'fit',
      items: PilotCreateForm
 });

 var pilots_datastore = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy(
     {
      url: '/pilots?format=ext_json',
      method: 'GET'
     }),
    reader: new Ext.data.JsonReader(
     {
      root: 'pilots',
      id: 'pilot.id',
      totalProperty: 'results'
     },
     [
       {name: 'pilot.id'},
       {name: 'pilot.registration'},
       {name: 'pilot.pilot_type.name'}
     ]),
     remoteSort: true,
     sortInfo: {field: 'registration', direction: 'ASC'}
 });

 var pilots_column_model = new Ext.grid.ColumnModel(
  [
    {header: 'ID', sortable: false, dataIndex: 'pilot.id'},
    {header: 'Registration', dataIndex: 'pilot.registration'},
    {header: 'Type', width: 80, dataIndex: 'pilot.pilot_type.name'},
  ]);

 pilots_column_model.defaultSortable = true;


 var grid = new Ext.grid.GridPanel(
  {
   ds: pilots_datastore,
   cm: pilots_column_model,
   sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
   renderTo:   'pilot-grid',
   title:      'Listing Pilots',
   width:      500,
   height:     500,
   stripeRows: true,
   viewConfig: {
       forceFit:true
   },

   // inline toolbars
   tbar:[{
       text:'New...',
       tooltip:'Create new Pilot',
       handler: displayFormWindow,
       iconCls:'add'
   }, '-', {
       text:'Edit...',
       tooltip:'Edit selected Pilot',
       handler: displayEditFormWindow,
       iconCls:'edit'
   },'-',{
       text:'Delete...',
       tooltip:'Delete selected Pilot',
       handler:deletePilot,
       iconCls:'remove'
   },'->'],
   bbar: new Ext.PagingToolbar({
             pageSize: 10,
             store: pilots_datastore,
             displayInfo: true,
             displayMsg: 'Record {0} - {1} of {2}',
             emptyMsg: "No records found"
   }),
   plugins:[new Ext.ux.grid.Search({
               position:'top'
           })]
 });

      // show record on double-click
 grid.on("rowdblclick", function(grid, row, e) { displayEditFormWindow() });


 pilots_datastore.load({params: {start: 0, limit:10}});



 // reset the Form before opening it
 function resetPilotForm()
  {
   RegistrationField.setValue('');
  }

 // check if the form is valid
 function isPilotFormValid()
  {
   return(RegistrationField.isValid());
  }

 function displayFormWindow()
  {
   if(!PilotCreateWindow.isVisible())
    {
     resetPilotForm();
     PilotCreateWindow.show();
    }
   else
    {
     PilotCreateWindow.toFront();
    }
 }

 function displayEditFormWindow()
  {
   if(!PilotCreateWindow.isVisible())
    {
   RegistrationField.setValue('abcde');
     PilotCreateWindow.show();
    }
   else
    {
     PilotCreateWindow.toFront();
    }
 }



 function createThePilot()
  {
   if(!isPilotFormValid()) {
      Ext.MessageBox.alert('Warning', 'Your Form is not valid!');
      return;
   }

   Ext.Ajax.request(
    {
     url: '/pilots/' + selected.data.id + '/new',
     waitMsg: 'Please wait...',
     params: {
       registration:   RegistrationField.getValue(),
     },
     success: function(response)
      {
       var result=eval(response.responseText);
       switch(result)
        {
         case 1:
           MsgTab('Creation OK','The pilot was created successfully.');
           PilotsDataStore.reload();
           PilotCreateWindow.hide();
         break;
         default:
           Ext.MessageBox.alert('Warning','Could not create the pilot.');
         break;
        }
      },
     failure: function(response)
      {
       var result=response.responseText;
       Ext.MessageBox.alert('error','could not connect to the database. retry later');
      }
    });
  }


 function deletePilot()
  {
   var selected = grid.getSelectionModel().getSelected();
/*   if(!selected) {
     alert('Please select a row first.');
     return;
    }

   if(!confirm('Really delete?'))
     return;*/

   Ext.Ajax.request(
    {
        url: '/pilots/' + selected.data['pilot.id'],
        method: 'DELETE',
        params: { _method: 'DELETE'
                <%= ", #{request_forgery_protection_token}: '#{form_authenticity_token}'" if protect_against_forgery? %>
        },
        success: function(response, options){ pilots_datastore.load(); },
        failure: function(response, options){ alert('Delete operation failed.'); }
    });

   MsgTab('Done', 'Your data was saved!');
  }



  });

//]]>
</script>
